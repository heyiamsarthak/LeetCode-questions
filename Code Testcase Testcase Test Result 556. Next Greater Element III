class Solution {
    public int nextGreaterElement(int n) {
        String s = Integer.toString(n);
        int len = s.length();
        int[] arr = new int[len];
        int q = len-1;
        int ans = -1;
        if(n==1999999999) return ans;
        

        while(n>0){
            int temp = n%10;
            arr[q] = temp;
            n = n/10;
            q--;
        }

        for(int i=len-1 ; i>0 ; i--){
        
            if(arr[i]>arr[i-1]){
                int min = minimum(arr[i-1],arr , i , len-1);
                swap(arr , i-1 , min);
                sort(arr , i , len-1);
                ans = 0;
                break;
            }
        }

         if(ans == 0){
        int mul = 1;
        for(int k=len-1 ; k>=0 ; k--){
            try {
            ans = ans+ arr[k]*mul;
            
        } catch (NumberFormatException e) {
            // If the result doesn't fit in a 32-bit integer, return -1
            return ans =-1;
        }
            
            mul = mul*10;
            
        }
        }
       if(ans<0 || ans<n || ans>2147483647) ans = -1;
        return ans;
    }

    public static void swap(int[] arr, int index1, int index2) {
        // Use a temporary variable to swap elements
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }

    public static void sort(int[] arr, int startIndex, int endIndex) {

        // Create a subarray within the specified range
        int[] subarray = Arrays.copyOfRange(arr, startIndex, endIndex + 1);

        // Sort the subarray
        Arrays.sort(subarray);

        // Copy the sorted subarray back to the original array
        System.arraycopy(subarray, 0, arr, startIndex, subarray.length);
    }

    public static int minimum(int f,int[] arr, int s, int e) {
        int min = Integer.MAX_VALUE;
        int ind = 0;
        for (int i = s; i <= e; i++) {
            if (arr[i] < min && arr[i]>f) {
                min = arr[i];
                ind = i;
            }
        }

        return ind;
    }
}

